<!DOCTYPE html>
<html id="home" lang="en">

<head>
    <title>Users ejection and presence detection</title>

    <style>
        audio,
        video {
            -moz-transition: all 1s ease;
            -ms-transition: all 1s ease;
            -o-transition: all 1s ease;
            -webkit-transition: all 1s ease;
            transition: all 1s ease;
            vertical-align: top;
        }

        input {
            border: 1px solid #d9d9d9;
            border-radius: 1px;
            font-size: 2em;
            margin: .2em;
            width: 30%;
        }
        p {
            padding: 1em;
        }

        .video-container {
            background: white;
            border: 2px solid black;
            border-radius: 0.2em;
            display: inline-block;
            margin: 2em .2em;
            padding: .1em;
            vertical-align: top;
        }

        .video-container h2 {
            border: 0;
            border-top: 1px solid black;
            display: block;
            margin: 0;
            text-align: center;
        }

        .eject {
            background-image: url('https://www.webrtc-experiment.com/images/eject.png') !important;
            background-position: center center !important;
            background-repeat: no-repeat !important;
            border-color: white;
            border-radius: 0;
            height: 30px;
            margin: .2em;
            position: absolute;
            width: 30px;
            z-index: 200;
        }
    </style>
</head>

<body>
<table style="border-left: 1px solid black; width: 100%;">
    <button id="speak">Join to speak</button>
    <tr>
        <td id="local-video-container">
            <h2>Local video container</h2>
        </td>
        <td id="remote-videos-container" style="background: white; border-left: 1px solid black;">
            <h2>Remote videos container
            </h2>
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <table id="sessions-list" style="width: 100%;"></table>
        </td>
    </tr>
</table>
<h2>Participants</h2>
<ol id="participants" style="text-align:left;"></ol>
<script src="/javascripts/rmc3.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript">

    var connection = new RTCMultiConnection();

    // check if user is ejected
    // clear rooms-list if user is ejected
    connection.onSessionClosed = function(event) {
        if (event.isEjected) {
            sessionsList.innerHTML = '';
            sessionsList.style.display = 'block';
        }
    };

    function onloadpage() {
        var roomid = "<%=roomid%>";
        var userid = "<%=userid%>";
        connection.extra = {
            username: userid
        };
        var type = "<%=type%>";
        console.log(type);
        if(type=="broad")
        {
            connection.checkPresence(roomid, function(isRoomExists) {
                if(isRoomExists) {
                    connection.sdpConstraints.mandatory = {
                        OfferToReceiveAudio: true,
                        OfferToReceiveVideo: true
                    };
                    connection.session = {
                        audio: true,
                        video: true,
                        oneway: true
                    };
                    connection.join(roomid);
                    return;
                }
            });
        }
        else if(type=="public")
        {
            connection.maxParticipantsAllowed = 2;
            var isPublicModerator = true;
            connection.open(roomid,isPublicModerator);
        }
        else if(type=="private")
        {
            var isPublicModerator = false;
            connection.open(roomid,isPublicModerator);
        }
    }

    window.onload = onloadpage();
    
    document.getElementById('speak').onclick = function () {
        connection.close();
        connection.session = {
            audio: true,
            video: true,
            oneway: false
        };
        console.log("<%=roomid%>");
        connection.join("<%=roomid%>");
    }
    connection.onstream = function(stream) {
        if (stream.type === 'local') {
            var video = getVideo(stream, {
                username: "<%=userid%>"
            });

            var participants = document.getElementById('participants');
            var li = document.createElement('li');
            li.id = "<%=userid%>"
            li.innerHTML = '<b>' + "<%=userid%>" +  '</b>&nbsp;&nbsp;';
            participants.appendChild(li);
            document.getElementById('local-video-container').appendChild(video);
        }
        if (stream.type === 'remote') {
            var participants = document.getElementById('participants');
            var li = document.createElement('li');
            li.id = stream.userid;
            li.innerHTML = '<b>' + stream.extra.username +  '</b>&nbsp;&nbsp;';
            participants.appendChild(li);
            var video = getVideo(stream, stream.extra);
            var remoteVideosContainer = document.getElementById('remote-videos-container');
            remoteVideosContainer.appendChild(video, remoteVideosContainer.firstChild);
        }
        stream.mediaElement.width = innerWidth / 3.4;
    };

    connection.onstreamended = function(e) {
        connection.extra ={

        };
        connection.updateExtraData();
        if (e.mediaElement && e.mediaElement.parentNode && e.mediaElement.parentNode.parentNode) {
            e.mediaElement.parentNode.parentNode.removeChild(e.mediaElement.parentNode);
        }
        document.getElementById('participants').removeChild(document.getElementById(e.userid));


    };

    function getVideo(stream, extra) {
        var div = document.createElement('div');
        div.className = 'video-container';
        div.id = stream.userid || 'self';

        if (stream.type === 'remote') {
            if (connection.isInitiator) {
                var eject = document.createElement('button');
                eject.className = 'eject';
                eject.title = 'Eject this User';

                eject.onclick = function() {
                    // eject a specific user
                    connection.eject(this.parentNode.id);
                    this.parentNode.style.display = 'none';
                };
                div.appendChild(eject);
            }
        }
        div.appendChild(stream.mediaElement);

        if (extra) {
            var h2 = document.createElement('h2');
            h2.innerHTML = extra.username;
            div.appendChild(h2);
        }
        return div;
    }

    connection.connect();
</script>
</body>

</html>